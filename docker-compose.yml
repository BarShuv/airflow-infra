version: "3.8"

services:
  # PostgreSQL - Stores Airflow metadata and task states
  postgres:
    image: postgres:13
    container_name: airflow_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"

  # Airflow Webserver - Provides UI for workflow management
  webserver:
    image: apache/airflow:2.5.0
    container_name: airflow_webserver
    restart: always
    depends_on:
      - postgres  # Ensure database is available before starting
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}  # Security key for Airflow
      - AIRFLOW_UID=50000
      - AIRFLOW_GID=0
    volumes:
      - ../airflow-dags/dags:/opt/airflow/dags  # DAG definitions
      - ./logs:/opt/airflow/logs  # Store execution logs
      - ./plugins:/opt/airflow/plugins  # Custom plugins (optional)
    ports:
      - "8080:8080"  # Web UI port
    command: ["webserver"]

  # Airflow Scheduler - Determines when tasks should execute
  scheduler:
    image: apache/airflow:2.5.0
    container_name: airflow_scheduler
    restart: always
    depends_on:
      - webserver
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - AIRFLOW_UID=50000
      - AIRFLOW_GID=0
    volumes:
      - ../airflow-dags/dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: ["scheduler"]

  # ngrok - Exposes Airflow externally for remote access
  ngrok:
    image: wernight/ngrok
    container_name: airflow_ngrok
    restart: always
    depends_on:
      - webserver  # Start only after Airflow webserver is up
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTH_TOKEN}  # Secure tunnel authentication
      - NGROK_REGION=${NGROK_REGION}
      - NGROK_PORT=${NGROK_PORT}
    command: ["ngrok", "http", "webserver:8080"]
    ports:
      - "4040:4040"  # ngrok monitoring dashboard
